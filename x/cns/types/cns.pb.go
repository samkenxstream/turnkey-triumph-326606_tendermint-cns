// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cns/cns.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//TODO(sahith): Add json and yaml flags
type ChainInfo struct {
	ChainName          string       `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Expiration         int64        `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Owner              string       `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	CanonicalIbcClient string       `protobuf:"bytes,4,opt,name=canonical_ibc_client,json=canonicalIbcClient,proto3" json:"canonical_ibc_client,omitempty"`
	Seed               []string     `protobuf:"bytes,5,rep,name=seed,proto3" json:"seed,omitempty"`
	SourceCodeUrl      string       `protobuf:"bytes,6,opt,name=source_code_url,json=sourceCodeUrl,proto3" json:"source_code_url,omitempty"`
	Version            *VersionInfo `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Fee                []types.Coin `protobuf:"bytes,8,rep,name=fee,proto3" json:"fee"`
}

func (m *ChainInfo) Reset()         { *m = ChainInfo{} }
func (m *ChainInfo) String() string { return proto.CompactTextString(m) }
func (*ChainInfo) ProtoMessage()    {}
func (*ChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4614c872fdf07012, []int{0}
}
func (m *ChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainInfo.Merge(m, src)
}
func (m *ChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainInfo proto.InternalMessageInfo

func (m *ChainInfo) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *ChainInfo) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *ChainInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ChainInfo) GetCanonicalIbcClient() string {
	if m != nil {
		return m.CanonicalIbcClient
	}
	return ""
}

func (m *ChainInfo) GetSeed() []string {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *ChainInfo) GetSourceCodeUrl() string {
	if m != nil {
		return m.SourceCodeUrl
	}
	return ""
}

func (m *ChainInfo) GetVersion() *VersionInfo {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ChainInfo) GetFee() []types.Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

type VersionInfo struct {
	Version          int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	SourceCommitHash string `protobuf:"bytes,2,opt,name=source_commit_hash,json=sourceCommitHash,proto3" json:"source_commit_hash,omitempty"`
	GenesisHash      string `protobuf:"bytes,3,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
}

func (m *VersionInfo) Reset()         { *m = VersionInfo{} }
func (m *VersionInfo) String() string { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()    {}
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4614c872fdf07012, []int{1}
}
func (m *VersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfo.Merge(m, src)
}
func (m *VersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfo proto.InternalMessageInfo

func (m *VersionInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VersionInfo) GetSourceCommitHash() string {
	if m != nil {
		return m.SourceCommitHash
	}
	return ""
}

func (m *VersionInfo) GetGenesisHash() string {
	if m != nil {
		return m.GenesisHash
	}
	return ""
}

func init() {
	proto.RegisterType((*ChainInfo)(nil), "tendermint.cns.cns.ChainInfo")
	proto.RegisterType((*VersionInfo)(nil), "tendermint.cns.cns.VersionInfo")
}

func init() { proto.RegisterFile("cns/cns.proto", fileDescriptor_4614c872fdf07012) }

var fileDescriptor_4614c872fdf07012 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xbf, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xe3, 0x5e, 0xfa, 0xe3, 0x1c, 0x2a, 0x90, 0x95, 0xe1, 0xa8, 0xc4, 0xe5, 0xa8, 0x04,
	0xba, 0x01, 0xf9, 0x48, 0x99, 0xe8, 0x82, 0xd4, 0x2c, 0x74, 0x61, 0x38, 0x09, 0x06, 0x96, 0x93,
	0xcf, 0x79, 0xcd, 0x59, 0xca, 0xf9, 0x45, 0x67, 0xa7, 0x94, 0x85, 0xbf, 0x81, 0x91, 0xb1, 0x7f,
	0x0d, 0xea, 0xd8, 0x91, 0x09, 0xa1, 0x64, 0xe1, 0xcf, 0x40, 0xb6, 0xdb, 0x34, 0x12, 0x8b, 0xf5,
	0xfc, 0x7d, 0x5f, 0xfb, 0xbd, 0xf7, 0xd1, 0xa3, 0x87, 0x52, 0x9b, 0x42, 0x6a, 0xc3, 0x17, 0x1d,
	0x5a, 0x64, 0xcc, 0x82, 0x9e, 0x42, 0xd7, 0x2a, 0x6d, 0xb9, 0x53, 0xa5, 0x36, 0x47, 0xa9, 0x44,
	0xd3, 0xa2, 0x29, 0x6a, 0x61, 0xa0, 0xb8, 0x1c, 0xd7, 0x60, 0xc5, 0xb8, 0x90, 0xa8, 0x74, 0x78,
	0x73, 0x34, 0x9c, 0xe1, 0x0c, 0x7d, 0x58, 0xb8, 0x28, 0xa8, 0xc7, 0x3f, 0x77, 0x68, 0x3c, 0x69,
	0x84, 0xd2, 0xe7, 0xfa, 0x02, 0xd9, 0x33, 0x4a, 0xa5, 0xbb, 0x54, 0x5a, 0xb4, 0x90, 0x90, 0x8c,
	0xe4, 0x71, 0x19, 0x7b, 0xe5, 0x83, 0x68, 0x81, 0xa5, 0x94, 0xc2, 0xd5, 0x42, 0x75, 0xc2, 0x2a,
	0xd4, 0xc9, 0x4e, 0x46, 0xf2, 0xa8, 0xdc, 0x52, 0xd8, 0x90, 0xee, 0xe2, 0x17, 0x0d, 0x5d, 0x12,
	0xf9, 0x97, 0xe1, 0xc2, 0x5e, 0xd3, 0xa1, 0x14, 0x1a, 0xb5, 0x92, 0x62, 0x5e, 0xa9, 0x5a, 0x56,
	0x72, 0xae, 0x40, 0xdb, 0xa4, 0xef, 0x4d, 0x6c, 0x93, 0x3b, 0xaf, 0xe5, 0xc4, 0x67, 0x18, 0xa3,
	0x7d, 0x03, 0x30, 0x4d, 0x76, 0xb3, 0x28, 0x8f, 0x4b, 0x1f, 0xb3, 0x97, 0xf4, 0xb1, 0xc1, 0x65,
	0x27, 0xa1, 0x92, 0x38, 0x85, 0x6a, 0xd9, 0xcd, 0x93, 0x3d, 0xff, 0xc1, 0x61, 0x90, 0x27, 0x38,
	0x85, 0x8f, 0xdd, 0x9c, 0xbd, 0xa5, 0xfb, 0x97, 0xd0, 0x19, 0xd7, 0xe0, 0x7e, 0x46, 0xf2, 0xc1,
	0xc9, 0x88, 0xff, 0x0f, 0x8b, 0x7f, 0x0a, 0x16, 0x37, 0x74, 0x79, 0xef, 0x67, 0x63, 0x1a, 0x5d,
	0x00, 0x24, 0x07, 0x59, 0x94, 0x0f, 0x4e, 0x9e, 0xf2, 0xc0, 0x93, 0x3b, 0x9e, 0xfc, 0x8e, 0x27,
	0x9f, 0xa0, 0xd2, 0x67, 0xfd, 0x9b, 0xdf, 0xa3, 0x5e, 0xe9, 0xbc, 0xa7, 0x07, 0x3f, 0xae, 0x47,
	0xe4, 0xef, 0xf5, 0x88, 0x1c, 0x7f, 0xa3, 0x83, 0xad, 0x4f, 0x59, 0xf2, 0xd0, 0x06, 0xf1, 0x9c,
	0x36, 0x55, 0x5e, 0x51, 0xb6, 0x19, 0xa4, 0x6d, 0x95, 0xad, 0x1a, 0x61, 0x1a, 0x0f, 0x33, 0x2e,
	0x9f, 0xdc, 0xcf, 0xe2, 0x12, 0xef, 0x85, 0x69, 0xd8, 0x73, 0xfa, 0x68, 0x06, 0x1a, 0x8c, 0x32,
	0xc1, 0x17, 0xc8, 0x0e, 0xee, 0x34, 0x67, 0x39, 0xed, 0xbb, 0xfa, 0x67, 0xef, 0x6e, 0x56, 0x29,
	0xb9, 0x5d, 0xa5, 0xe4, 0xcf, 0x2a, 0x25, 0xdf, 0xd7, 0x69, 0xef, 0x76, 0x9d, 0xf6, 0x7e, 0xad,
	0xd3, 0xde, 0xe7, 0x17, 0x33, 0x65, 0x9b, 0x65, 0xcd, 0x25, 0xb6, 0xc5, 0x03, 0x0a, 0xb7, 0x4d,
	0xc5, 0x95, 0x3f, 0xed, 0xd7, 0x05, 0x98, 0x7a, 0xcf, 0x2f, 0xc4, 0x9b, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0x57, 0x10, 0x00, 0x6b, 0x02, 0x00, 0x00,
}

func (this *ChainInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainInfo)
	if !ok {
		that2, ok := that.(ChainInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainName != that1.ChainName {
		return false
	}
	if this.Expiration != that1.Expiration {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.CanonicalIbcClient != that1.CanonicalIbcClient {
		return false
	}
	if len(this.Seed) != len(that1.Seed) {
		return false
	}
	for i := range this.Seed {
		if this.Seed[i] != that1.Seed[i] {
			return false
		}
	}
	if this.SourceCodeUrl != that1.SourceCodeUrl {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if len(this.Fee) != len(that1.Fee) {
		return false
	}
	for i := range this.Fee {
		if !this.Fee[i].Equal(&that1.Fee[i]) {
			return false
		}
	}
	return true
}
func (this *VersionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionInfo)
	if !ok {
		that2, ok := that.(VersionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.SourceCommitHash != that1.SourceCommitHash {
		return false
	}
	if this.GenesisHash != that1.GenesisHash {
		return false
	}
	return true
}
func (m *ChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fee) > 0 {
		for iNdEx := len(m.Fee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCns(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCns(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SourceCodeUrl) > 0 {
		i -= len(m.SourceCodeUrl)
		copy(dAtA[i:], m.SourceCodeUrl)
		i = encodeVarintCns(dAtA, i, uint64(len(m.SourceCodeUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Seed) > 0 {
		for iNdEx := len(m.Seed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Seed[iNdEx])
			copy(dAtA[i:], m.Seed[iNdEx])
			i = encodeVarintCns(dAtA, i, uint64(len(m.Seed[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CanonicalIbcClient) > 0 {
		i -= len(m.CanonicalIbcClient)
		copy(dAtA[i:], m.CanonicalIbcClient)
		i = encodeVarintCns(dAtA, i, uint64(len(m.CanonicalIbcClient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCns(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Expiration != 0 {
		i = encodeVarintCns(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCns(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintCns(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceCommitHash) > 0 {
		i -= len(m.SourceCommitHash)
		copy(dAtA[i:], m.SourceCommitHash)
		i = encodeVarintCns(dAtA, i, uint64(len(m.SourceCommitHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintCns(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCns(dAtA []byte, offset int, v uint64) int {
	offset -= sovCns(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	if m.Expiration != 0 {
		n += 1 + sovCns(uint64(m.Expiration))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	l = len(m.CanonicalIbcClient)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	if len(m.Seed) > 0 {
		for _, s := range m.Seed {
			l = len(s)
			n += 1 + l + sovCns(uint64(l))
		}
	}
	l = len(m.SourceCodeUrl)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovCns(uint64(l))
	}
	if len(m.Fee) > 0 {
		for _, e := range m.Fee {
			l = e.Size()
			n += 1 + l + sovCns(uint64(l))
		}
	}
	return n
}

func (m *VersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCns(uint64(m.Version))
	}
	l = len(m.SourceCommitHash)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovCns(uint64(l))
	}
	return n
}

func sovCns(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCns(x uint64) (n int) {
	return sovCns(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicalIbcClient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicalIbcClient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCodeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCodeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &VersionInfo{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = append(m.Fee, types.Coin{})
			if err := m.Fee[len(m.Fee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCns
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCns
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCns
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCns
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCns(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCns
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCns(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCns
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCns
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCns
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCns
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCns
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCns        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCns          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCns = fmt.Errorf("proto: unexpected end of group")
)
